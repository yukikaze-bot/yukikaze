diff --git a/src/client/Client.js b/src/client/Client.js
index 3079c3b34f2682389c63a5dbef4446bc6b2781cc..aa520f9a6b630846d4dace3818693b2fe24024ca 100644
--- a/src/client/Client.js
+++ b/src/client/Client.js
@@ -10,7 +10,7 @@ const ChannelManager = require('../managers/ChannelManager');
 const GuildManager = require('../managers/GuildManager');
 const UserManager = require('../managers/UserManager');
 const ShardClientUtil = require('../sharding/ShardClientUtil');
-const ClientPresence = require('../structures/ClientPresence');
+const Structures = require('../util/Structures');
 const GuildPreview = require('../structures/GuildPreview');
 const GuildTemplate = require('../structures/GuildTemplate');
 const Invite = require('../structures/Invite');
@@ -119,6 +119,8 @@ class Client extends BaseClient {
      */
     this.channels = new ChannelManager(this);

+    const ClientPresence = Structures.get('ClientPresence');
+
     /**
      * The presence of the Client
      * @private
diff --git a/src/client/actions/InteractionCreate.js b/src/client/actions/InteractionCreate.js
index 85072d059e2bb4fef470b248e23ac1bd2941f37c..141c883013cdbab784a5e1062a54b147111d905b 100644
--- a/src/client/actions/InteractionCreate.js
+++ b/src/client/actions/InteractionCreate.js
@@ -1,9 +1,7 @@
 'use strict';

 const Action = require('./Action');
-const ButtonInteraction = require('../../structures/ButtonInteraction');
-const CommandInteraction = require('../../structures/CommandInteraction');
-const SelectMenuInteraction = require('../../structures/SelectMenuInteraction');
+const Structures = require('../../util/Structures');
 const { Events, InteractionTypes, MessageComponentTypes } = require('../../util/Constants');

 let deprecationEmitted = false;
@@ -18,15 +16,15 @@ class InteractionCreateAction extends Action {
     let InteractionType;
     switch (data.type) {
       case InteractionTypes.APPLICATION_COMMAND:
-        InteractionType = CommandInteraction;
+        InteractionType = Structures.get('CommandInteraction');
         break;
       case InteractionTypes.MESSAGE_COMPONENT:
         switch (data.data.component_type) {
           case MessageComponentTypes.BUTTON:
-            InteractionType = ButtonInteraction;
+            InteractionType = Structures.get('ButtonInteraction');
             break;
           case MessageComponentTypes.SELECT_MENU:
-            InteractionType = SelectMenuInteraction;
+            InteractionType = Structures.get('SelectMenuInteraction');
             break;
           default:
             client.emit(
diff --git a/src/client/actions/VoiceStateUpdate.js b/src/client/actions/VoiceStateUpdate.js
index a01191a378beede142f1c45034c3193df76be07f..fd4faffc46f9d8e588f7b8a773c4e8e684d1f975 100644
--- a/src/client/actions/VoiceStateUpdate.js
+++ b/src/client/actions/VoiceStateUpdate.js
@@ -1,7 +1,7 @@
 'use strict';

 const Action = require('./Action');
-const VoiceState = require('../../structures/VoiceState');
+const Structures = require('../../util/Structures');
 const { Events } = require('../../util/Constants');

 class VoiceStateUpdate extends Action {
@@ -9,6 +9,7 @@ class VoiceStateUpdate extends Action {
     const client = this.client;
     const guild = client.guilds.cache.get(data.guild_id);
     if (guild) {
+      const VoiceState = Structures.get('VoiceState');
       // Update the state
       const oldState =
         guild.voiceStates.cache.get(data.user_id)?._clone() ?? new VoiceState(guild, { user_id: data.user_id });
diff --git a/src/index.js b/src/index.js
index 34cc9f298c68600ca4c4d2afa482c04adae88203..66066bc13a08d52619ab93379ab1d579da79ccf6 100644
--- a/src/index.js
+++ b/src/index.js
@@ -27,6 +27,7 @@ module.exports = {
   Options: require('./util/Options'),
   Permissions: require('./util/Permissions'),
   SnowflakeUtil: require('./util/SnowflakeUtil'),
+  Structures: require('./util/Structures'),
   SystemChannelFlags: require('./util/SystemChannelFlags'),
   ThreadMemberFlags: require('./util/ThreadMemberFlags'),
   UserFlags: require('./util/UserFlags'),
diff --git a/src/index.mjs b/src/index.mjs
index 2f9b8a8043882add96b86fe99934c7eb83d0103f..b42c612fca2ae951abd1defbbec4c33b60370002 100644
--- a/src/index.mjs
+++ b/src/index.mjs
@@ -95,6 +95,7 @@ export const SnowflakeUtil = mod.SnowflakeUtil;
 export const StageChannel = mod.StageChannel;
 export const Sticker = mod.Sticker;
 export const StoreChannel = mod.StoreChannel;
+export const Structures = mod.Structures;
 export const SystemChannelFlags = mod.SystemChannelFlags;
 export const Team = mod.Team;
 export const TeamMember = mod.TeamMember;
diff --git a/src/managers/DataManager.js b/src/managers/DataManager.js
index 6a5c14ca2015ec0d12b292d6b86673ce569cc2b9..16670e2e3e229cdddcdbfc225ec656f0549b9512 100644
--- a/src/managers/DataManager.js
+++ b/src/managers/DataManager.js
@@ -3,6 +3,8 @@
 const BaseManager = require('./BaseManager');
 const { Error } = require('../errors');

+let Structures;
+
 /**
  * Manages the API methods of a data model along with a collection of instances.
  * @extends {BaseManager}
@@ -12,6 +14,8 @@ class DataManager extends BaseManager {
   constructor(client, holds) {
     super(client);

+    if (!Structures) Structures = require('../util/Structures');
+
     /**
      * The data structure belonging to this manager.
      * @name DataManager#holds
@@ -19,7 +23,7 @@ class DataManager extends BaseManager {
      * @private
      * @readonly
      */
-    Object.defineProperty(this, 'holds', { value: holds });
+    Object.defineProperty(this, 'holds', { value: Structures.get(holds.name) ?? holds });
   }

   /**
diff --git a/src/structures/Channel.js b/src/structures/Channel.js
index 37a7e5e73dcb64adcce7f2d6535e3d6e2406a132..7086d1cbb69b3ecadc6bf55be12571696d862ce6 100644
--- a/src/structures/Channel.js
+++ b/src/structures/Channel.js
@@ -1,14 +1,6 @@
 'use strict';

 const Base = require('./Base');
-let CategoryChannel;
-let DMChannel;
-let NewsChannel;
-let StageChannel;
-let StoreChannel;
-let TextChannel;
-let ThreadChannel;
-let VoiceChannel;
 const { ChannelTypes, ThreadChannelTypes } = require('../util/Constants');
 const SnowflakeUtil = require('../util/SnowflakeUtil');

@@ -128,18 +120,12 @@ class Channel extends Base {
   }

   static create(client, data, guild, allowUnknownGuild) {
-    if (!CategoryChannel) CategoryChannel = require('./CategoryChannel');
-    if (!DMChannel) DMChannel = require('./DMChannel');
-    if (!NewsChannel) NewsChannel = require('./NewsChannel');
-    if (!StageChannel) StageChannel = require('./StageChannel');
-    if (!StoreChannel) StoreChannel = require('./StoreChannel');
-    if (!TextChannel) TextChannel = require('./TextChannel');
-    if (!ThreadChannel) ThreadChannel = require('./ThreadChannel');
-    if (!VoiceChannel) VoiceChannel = require('./VoiceChannel');
+    const Structures = require('../util/Structures');

     let channel;
     if (!data.guild_id && !guild) {
       if ((data.recipients && data.type !== ChannelTypes.GROUP) || data.type === ChannelTypes.DM) {
+        const DMChannel = Structures.get('DMChannel');
         channel = new DMChannel(client, data);
       } else if (data.type === ChannelTypes.GROUP) {
         const PartialGroupDMChannel = require('./PartialGroupDMChannel');
@@ -151,32 +137,39 @@ class Channel extends Base {
       if (guild || allowUnknownGuild) {
         switch (data.type) {
           case ChannelTypes.TEXT: {
+            const TextChannel = Structures.get('TextChannel');
             channel = new TextChannel(guild, data, client);
             break;
           }
           case ChannelTypes.VOICE: {
+            const VoiceChannel = Structures.get('VoiceChannel');
             channel = new VoiceChannel(guild, data, client);
             break;
           }
           case ChannelTypes.CATEGORY: {
+            const CategoryChannel = Structures.get('CategoryChannel');
             channel = new CategoryChannel(guild, data, client);
             break;
           }
           case ChannelTypes.NEWS: {
+            const NewsChannel = Structures.get('NewsChannel');
             channel = new NewsChannel(guild, data, client);
             break;
           }
           case ChannelTypes.STORE: {
+            const StoreChannel = Structures.get('StoreChannel');
             channel = new StoreChannel(guild, data, client);
             break;
           }
           case ChannelTypes.STAGE: {
+            const StageChannel = Structures.get('StageChannel');
             channel = new StageChannel(guild, data, client);
             break;
           }
           case ChannelTypes.NEWS_THREAD:
           case ChannelTypes.PUBLIC_THREAD:
           case ChannelTypes.PRIVATE_THREAD: {
+            const ThreadChannel = Structures.get('ThreadChannel');
             channel = new ThreadChannel(guild, data, client);
             if (!allowUnknownGuild) channel.parent?.threads.cache.set(channel.id, channel);
             break;
diff --git a/src/structures/ClientUser.js b/src/structures/ClientUser.js
index 4f090f10ae5b82b89c79d6854f64fe84583834a3..12b288986e8bb623645f09c4bad0b22b45bc452c 100644
--- a/src/structures/ClientUser.js
+++ b/src/structures/ClientUser.js
@@ -1,13 +1,13 @@
 'use strict';

-const User = require('./User');
+const Structures = require('../util/Structures');
 const DataResolver = require('../util/DataResolver');

 /**
  * Represents the logged in client's Discord user.
  * @extends {User}
  */
-class ClientUser extends User {
+class ClientUser extends Structures.get('User') {
   constructor(client, data) {
     super(client, data);
     this._typing = new Map();
diff --git a/src/structures/GuildMember.js b/src/structures/GuildMember.js
index c097b7b15eb10f95e6a404e97093f49c6fdd3898..aa2de64b52cdb8151d6ae6ed9650d17b49b9b643 100644
--- a/src/structures/GuildMember.js
+++ b/src/structures/GuildMember.js
@@ -1,7 +1,7 @@
 'use strict';

 const Base = require('./Base');
-const VoiceState = require('./VoiceState');
+let Structures;
 const TextBasedChannel = require('./interfaces/TextBasedChannel');
 const { Error } = require('../errors');
 const GuildMemberRoleManager = require('../managers/GuildMemberRoleManager');
@@ -109,6 +109,8 @@ class GuildMember extends Base {
    * @readonly
    */
   get voice() {
+    if (!Structures) Structures = require('../util/Structures');
+    const VoiceState = Structures.get('VoiceState');
     return this.guild.voiceStates.cache.get(this.id) ?? new VoiceState(this.guild, { user_id: this.id });
   }

diff --git a/src/util/Structures.js b/src/util/Structures.js
new file mode 100644
index 0000000000000000000000000000000000000000..33343e7e12948d21f0e38cdd224b68d360c47934
--- /dev/null
+++ b/src/util/Structures.js
@@ -0,0 +1,122 @@
+'use strict';
+
+/**
+ * An extendable structure:
+ * * **`GuildEmoji`**
+ * * **`DMChannel`**
+ * * **`TextChannel`**
+ * * **`VoiceChannel`**
+ * * **`CategoryChannel`**
+ * * **`NewsChannel`**
+ * * **`StoreChannel`**
+ * * **`StageChannel`**
+ * * **`ThreadChannel`**
+ * * **`GuildMember`**
+ * * **`ThreadMember`**
+ * * **`Guild`**
+ * * **`Message`**
+ * * **`MessageReaction`**
+ * * **`Presence`**
+ * * **`ClientPresence`**
+ * * **`VoiceState`**
+ * * **`Role`**
+ * * **`User`**
+ * * **`CommandInteraction`**
+ * * **`ButtonInteraction`**
+ * * **`StageInstance`**
+ * * **`SelectMenuInteraction`**
+ * @typedef {string} ExtendableStructure
+ */
+
+/**
+ * Allows for the extension of built-in Discord.js structures that are instantiated by {@link BaseManager Managers}.
+ */
+class Structures extends null {
+  /**
+   * Retrieves a structure class.
+   * @param {string} structure Name of the structure to retrieve
+   * @returns {Function}
+   */
+  static get(structure) {
+    if (typeof structure === 'string') return structures[structure];
+    throw new TypeError(`"structure" argument must be a string (received ${typeof structure})`);
+  }
+
+  /**
+   * Extends a structure.
+   * <warn> Make sure to extend all structures before instantiating your client.
+   * Extending after doing so may not work as expected. </warn>
+   * @param {ExtendableStructure} structure Name of the structure class to extend
+   * @param {Function} extender Function that takes the base class to extend as its only parameter and returns the
+   * extended class/prototype
+   * @returns {Function} Extended class/prototype returned from the extender
+   * @example
+   * const { Structures } = require('discord.js');
+   *
+   * Structures.extend('Guild', Guild => {
+   *   class CoolGuild extends Guild {
+   *     constructor(client, data) {
+   *       super(client, data);
+   *       this.cool = true;
+   *     }
+   *   }
+   *
+   *   return CoolGuild;
+   * });
+   */
+  static extend(structure, extender) {
+    if (!structures[structure]) throw new RangeError(`"${structure}" is not a valid extensible structure.`);
+    if (typeof extender !== 'function') {
+      const received = `(received ${typeof extender})`;
+      throw new TypeError(
+        `"extender" argument must be a function that returns the extended structure class/prototype ${received}.`,
+      );
+    }
+
+    const extended = extender(structures[structure]);
+    if (typeof extended !== 'function') {
+      const received = `(received ${typeof extended})`;
+      throw new TypeError(`The extender function must return the extended structure class/prototype ${received}.`);
+    }
+
+    if (!(extended.prototype instanceof structures[structure])) {
+      const prototype = Object.getPrototypeOf(extended);
+      const received = `${extended.name ?? 'unnamed'}${prototype.name ? ` extends ${prototype.name}` : ''}`;
+      throw new Error(
+        'The class/prototype returned from the extender function must extend the existing structure class/prototype' +
+          ` (received function ${received}; expected extension of ${structures[structure].name}).`,
+      );
+    }
+
+    structures[structure] = extended;
+    return extended;
+  }
+}
+
+const structures = {
+  GuildEmoji: require('../structures/GuildEmoji'),
+  DMChannel: require('../structures/DMChannel'),
+  TextChannel: require('../structures/TextChannel'),
+  VoiceChannel: require('../structures/VoiceChannel'),
+  CategoryChannel: require('../structures/CategoryChannel'),
+  NewsChannel: require('../structures/NewsChannel'),
+  StoreChannel: require('../structures/StoreChannel'),
+  StageChannel: require('../structures/StageChannel'),
+  ThreadChannel: require('../structures/ThreadChannel'),
+  GuildMember: require('../structures/GuildMember'),
+  ThreadMember: require('../structures/ThreadMember'),
+  Guild: require('../structures/Guild'),
+  Message: require('../structures/Message'),
+  MessageReaction: require('../structures/MessageReaction'),
+  Presence: require('../structures/Presence').Presence,
+  ClientPresence: require('../structures/ClientPresence'),
+  VoiceState: require('../structures/VoiceState'),
+  Role: require('../structures/Role'),
+  User: require('../structures/User'),
+  CommandInteraction: require('../structures/CommandInteraction'),
+  ButtonInteraction: require('../structures/ButtonInteraction'),
+  SelectMenuInteraction: require('../structures/SelectMenuInteraction'),
+  StageInstance: require('../structures/StageInstance'),
+};
+
+module.exports = Structures;
diff --git a/typings/index.d.ts b/typings/index.d.ts
index 324baeeb6966055c427a70788b257b1f3a560ed2..f08641f31df07296435a9b44e677f0409e3c10d0 100644
--- a/typings/index.d.ts
+++ b/typings/index.d.ts
@@ -1884,6 +1884,20 @@ export class WebSocketShard extends EventEmitter {
   public once(event: string, listener: (...args: any[]) => Awaited<void>): this;
 }

+export class Structures extends null {
+  private constructor();
+  public static get<K extends keyof Extendable>(structure: K): Extendable[K];
+  public static get(structure: string): (...args: any[]) => void;
+  public static extend<K extends keyof Extendable, T extends Extendable[K]>(
+    structure: K,
+    extender: (baseClass: Extendable[K]) => T,
+  ): T;
+  public static extend<T extends (...args: any[]) => void>(
+    structure: string,
+    extender: (baseClass: typeof Function) => T,
+  ): T;
+}
+
 export class Widget extends Base {
   public constructor(client: Client, data: object);
   private _patch(data: object): void;
@@ -2997,6 +3011,29 @@ export interface ClientPresenceStatusData {
   desktop?: ClientPresenceStatus;
 }

+export interface Extendable {
+  GuildEmoji: typeof GuildEmoji;
+  DMChannel: typeof DMChannel;
+  TextChannel: typeof TextChannel;
+  VoiceChannel: typeof VoiceChannel;
+  CategoryChannel: typeof CategoryChannel;
+  NewsChannel: typeof NewsChannel;
+  StoreChannel: typeof StoreChannel;
+  ThreadChannel: typeof ThreadChannel;
+  GuildMember: typeof GuildMember;
+  ThreadMember: typeof ThreadMember;
+  Guild: typeof Guild;
+  Message: typeof Message;
+  MessageReaction: typeof MessageReaction;
+  Presence: typeof Presence;
+  VoiceState: typeof VoiceState;
+  Role: typeof Role;
+  User: typeof User;
+  CommandInteraction: typeof CommandInteraction;
+  ButtonInteraction: typeof ButtonInteraction;
+  SelectMenuInteraction: typeof SelectMenuInteraction;
+}
+
 export interface ClientUserEditData {
   username?: string;
   avatar?: BufferResolvable | Base64Resolvable;
